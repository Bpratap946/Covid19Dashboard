name: 'üîÄ Gemini Triage'

on:
  workflow_call:
    inputs:
      additional_context:
        type: 'string'
        description: 'Any additional context from the request'
        required: false

concurrency:
  group: '${{ github.workflow }}-triage-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  triage:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 7
    outputs:
      available_labels: '${{ steps.get_labels.outputs.available_labels }}'
      selected_labels: '${{ steps.gemini_analysis.outputs.selected_labels }}'
    permissions:
      contents: 'read'
      id-token: 'write'
      issues: 'read'
      pull-requests: 'read'
    steps:
      - name: 'Get repository labels'
        id: 'get_labels'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          script: |-
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (!labels || labels.length === 0) {
              core.setFailed('There are no issue labels in this repository.')
            }

            const labelNames = labels.map(label => label.name).sort();
            core.setOutput('available_labels', labelNames.join(','));
            core.info(`Found ${labelNames.length} labels: ${labelNames.join(', ')}`);
            return labelNames;

      - name: 'Run Gemini issue analysis'
        id: 'gemini_analysis'
        if: |-
          ${{ steps.get_labels.outputs.available_labels != '' }}
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: ''
          ISSUE_TITLE: '${{ github.event.issue.title }}'
          ISSUE_BODY: '${{ github.event.issue.body }}'
          AVAILABLE_LABELS: '${{ steps.get_labels.outputs.available_labels }}'
        with:
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gemini_debug: '${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || false) }}'
          gemini_model: '${{ vars.GEMINI_MODEL }}'
          google_api_key: '${{ secrets.GOOGLE_API_KEY }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          settings: |-
            {
              "model": {
                "maxSessionTurns": 5,
                "temperature": 0.1
              },
              "telemetry": {
                "enabled": ${{ vars.GOOGLE_CLOUD_PROJECT != '' }},
                "target": "gcp"
              },
              "tools": {
                "core": [
                  "run_shell_command(echo)",
                  "run_shell_command(printenv)"
                ]
              }
            }
          prompt: |-
            ## Role

            You are an issue triage assistant. Analyze the current GitHub issue and identify the most appropriate existing labels.

            ## Critical Instructions

            1. You MUST output labels by writing to the GitHub Actions environment file
            2. The file path is available in the GITHUB_OUTPUT environment variable
            3. You MUST use the echo command to write: `echo "selected_labels=label1,label2,label3" >> "$GITHUB_OUTPUT"`
            4. Only use labels from the available labels list provided below
            5. Use comma-separated format with NO spaces between labels
            6. When generating shell commands, you **MUST NOT** use command substitution with `$(...)`, `<(...)`, or `>(...)`.

            ## Input Data

            **Available Labels** (comma-separated):
            ```
            ${{ env.AVAILABLE_LABELS }}
            ```

            **Issue Title**:
            ```
            ${{ env.ISSUE_TITLE }}
            ```

            **Issue Body**:
            ```
            ${{ env.ISSUE_BODY }}
            ```

            ## Your Task

            1. First, use `printenv` to see the GITHUB_OUTPUT variable value
            
            2. Review the issue title and body above
            
            3. From the available labels list, choose ALL appropriate labels that match this issue
            
            4. Write the selected labels to the output file using this EXACT command format:
               ```bash
               echo "selected_labels=bug,enhancement" >> "$GITHUB_OUTPUT"
               ```
               Replace "bug,enhancement" with your chosen labels (comma-separated, no spaces)
            
            5. If no labels are appropriate, write an empty string:
               ```bash
               echo "selected_labels=" >> "$GITHUB_OUTPUT"
               ```

            ## Examples

            If the issue is about a bug in authentication:
            ```bash
            echo "selected_labels=bug,authentication" >> "$GITHUB_OUTPUT"
            ```

            If the issue is requesting a new feature:
            ```bash
            echo "selected_labels=enhancement,feature-request" >> "$GITHUB_OUTPUT"
            ```

            ## IMPORTANT

            - DO NOT use any variables like ${GITHUB_OUTPUT} or ${GITHUB_ENV}
            - USE the literal string "$GITHUB_OUTPUT" which will be expanded by the shell
            - The output MUST be written to the file to be captured by GitHub Actions
            - You MUST actually execute the echo command using the run_shell_command tool

  label:
    runs-on: 'ubuntu-latest'
    needs:
      - 'triage'
    if: |-
      ${{ needs.triage.outputs.selected_labels != '' }}
    permissions:
      contents: 'read'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-contents: 'read'
          permission-issues: 'write'
          permission-pull-requests: 'write'

      - name: 'Apply labels'
        env:
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          AVAILABLE_LABELS: '${{ needs.triage.outputs.available_labels }}'
          SELECTED_LABELS: '${{ needs.triage.outputs.selected_labels }}'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
          script: |-
            const availableLabels = (process.env.AVAILABLE_LABELS || '').split(',')
              .map((label) => label.trim())
              .sort()

            const selectedLabels = (process.env.SELECTED_LABELS || '').split(',')
              .map((label) => label.trim())
              .filter((label) => label && availableLabels.includes(label))
              .sort()

            const issueNumber = process.env.ISSUE_NUMBER;
            
            core.info(`Available labels: ${availableLabels.join(', ')}`);
            core.info(`Selected labels: ${selectedLabels.join(', ')}`);
            
            if (selectedLabels && selectedLabels.length > 0) {
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: selectedLabels,
              });
              core.info(`‚úÖ Successfully set labels: ${selectedLabels.join(',')}`);
            } else {
              core.info(`‚ö†Ô∏è No valid labels to set. Selected: ${process.env.SELECTED_LABELS}`);
            }
