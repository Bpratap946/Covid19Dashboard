name: '🤖 Gemini Triage & Implement'

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

defaults:
  run:
    shell: bash

jobs:
  # -------------------------------------------------------------------------
  # JOB 1: TRIAGE - Runs when a new issue is opened.
  # -------------------------------------------------------------------------
  triage:
    runs-on: ubuntu-latest
    permissions:
      contents: read      # Read codebase for context
      issues: write      # Write labels and comments
      pull-requests: read  # Read pull requests
      id-token: write      # Required for Workload Identity Federation

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Get repository labels'
        id: get_labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            if (!labels || labels.length === 0) {
              core.setFailed('There are no issue labels in this repository.')
            }
            const labelNames = labels.map(label => label.name).sort();
            core.setOutput('available_labels', labelNames.join(','));
            core.info(`Found ${labelNames.length} available labels.`);
            return labelNames;

      - name: 'Analyze Issue & Generate Plan'
        id: gemini_analysis
        uses: 'google-github-actions/run-gemini-cli@main'
        # ✅ DEBUG STEP 1: Continue even if this step fails so we can print the error.
        continue-on-error: true
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_model: 'gemini-1.5-flash-001'
          prompt: |
            Your role is an expert software engineer triaging a GitHub issue. You have full access to the repository's file structure and content.

            **ANALYSIS PROCESS:**
            1.  **Understand the Goal:** First, read the issue title and body carefully to understand the user's intent. Is it a bug report, a feature request, or a documentation update?
            2.  **Identify Key Components:** Based on the issue's text, identify keywords for components, functions, or UI elements (e.g., 'stats table', 'user login', 'API endpoint').
            3.  **Locate Relevant Code:** Using these keywords, search the codebase to find the most relevant files. Focus your analysis primarily on these files to formulate a plan.
            4.  **Formulate a Plan & Labels:** Based on your code analysis, create a step-by-step implementation plan and select the most appropriate labels.

            **GIVEN THE FOLLOWING CONTEXT:**

            **1. GitHub Issue:**
            - Title: "${{ github.event.issue.title }}"
            - Body: "${{ github.event.issue.body }}"

            **2. Available Labels:**
            - `${{ steps.get_labels.outputs.available_labels }}`

            **YOUR REQUIRED OUTPUT:**
            You must provide a single, raw JSON object with two fields:
            1.  `labels`: An array of strings containing appropriate labels selected ONLY from the "Available Labels" list above.
            2.  `plan`: A detailed, step-by-step implementation plan written in markdown format.

            **CRITICAL REQUIREMENT:** Your entire output must be ONLY the raw JSON object. Do not include any explanatory text, comments, or markdown code fences (like ```json) before or after the JSON.

      # ✅ DEBUG STEP 2: This step runs ONLY if the step above failed. It prints the full error.
      - name: 'Display Full Gemini Error Report on Failure'
        if: steps.gemini_analysis.outcome == 'failure'
        run: |
          echo "::error title=Gemini Analysis Failed::The call to the Gemini API failed. See the full report below for details."
          echo "----------------------- FULL ERROR REPORT -----------------------"
          echo "${{ steps.gemini_analysis.outputs.gemini_errors }}"
          echo "-----------------------------------------------------------------"
          # Fail the workflow intentionally to stop further execution.
          exit 1

      - name: 'Apply Labels and Post Plan'
        # This step will be skipped if the error-printing step ran.
        uses: actions/github-script@v7
        with:
          script: |
            const analysisJSON = `${{ steps.gemini_analysis.outputs.gemini_response }}`;
            const issueNumber = context.issue.number;
            let analysis;

            // ✅ DEBUG STEP 3: Better error handling for JSON parsing.
            if (!analysisJSON || analysisJSON.trim() === '') {
              core.setFailed(`Gemini returned an empty response. Cannot proceed.`);
              return;
            }
            try {
              analysis = JSON.parse(analysisJSON);
            } catch (e) {
              core.setFailed(`Failed to parse Gemini's JSON response. Error: ${e.message}. Raw Response:\n${analysisJSON}`);
              return;
            }

            const availableLabels = '${{ steps.get_labels.outputs.available_labels }}'.split(',');
            const suggestedLabels = analysis.labels || [];
            const validLabels = suggestedLabels.filter(label => availableLabels.includes(label));
            
            if (validLabels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, labels: validLabels,
              });
            }

            const planBody = `
            🤖 **Triage Complete** (Powered by Gemini)
            ### 🏷️ Suggested Labels:
            ${validLabels.length > 0 ? validLabels.map(label => `- \`${label}\``).join('\n') : "None"}
            ### 📝 Proposed Implementation Plan:
            ${analysis.plan || "No implementation plan was generated."}
            ---
            If this plan looks good, please respond with \`@gemini-cli implement\` to start the automated code generation.
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, body: planBody
            });

  # -------------------------------------------------------------------------
  # JOB 2: IMPLEMENT - Runs when a user confirms the plan.
  # -------------------------------------------------------------------------
  implement:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    if: |
      github.event_name == 'issue_comment' && 
      github.event.action == 'created' && 
      contains(github.event.comment.body, '@gemini-cli implement')

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Install Gemini CLI'
        run: npm install -g @google/gemini-cli
        
      - name: 'Generate Code Changes'
        id: gemini_code
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          BRANCH_NAME: gemini-fix/issue-${{ github.event.issue.number }}
        run: |
          git checkout -b "${BRANCH_NAME}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          
          echo "## Fetching code changes from Gemini..."
          # Improved prompt for more reliable code output
          gemini "Your role is an expert software engineer. Based on the GitHub issue below and the repository code, generate the complete, ready-to-use code.
          
          **Issue Title:** ${{ github.event.issue.title }}
          **Issue Body:** ${{ github.event.issue.body }}

          **CRITICAL REQUIREMENT:** Output ONLY the code for the files that need to be created or modified. Use the standard file block format for each file:
          \`\`\`language:Filename.extension
          ... code content ...
          \`\`\`" > gemini_output.txt

          # ✅ DEBUG STEP 4: Print raw output from Gemini before parsing.
          echo "--- Raw Gemini Code Output ---"
          cat gemini_output.txt
          echo "------------------------------"

          node -e "
            const fs = require('fs');
            const path = require('path');
            let filesWritten = false;
            try {
              const content = fs.readFileSync('gemini_output.txt', 'utf8');
              const fileBlocks = content.match(/```[a-zA-Z]*:([^\n]+)\n([\s\S]*?)```/g);
              if (!fileBlocks) {
                console.log('No valid file blocks found in the output.');
              } else {
                fileBlocks.forEach(block => {
                  const headerMatch = block.match(/```[a-zA-Z]*:([^\n]+)\n/);
                  const filePath = headerMatch[1].trim();
                  const code = block.replace(headerMatch[0], '').replace(/```$/, '').trim();
                  
                  const dir = path.dirname(filePath);
                  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
                  
                  fs.writeFileSync(filePath, code);
                  console.log(\`✅ Wrote file: \${filePath}\`);
                  filesWritten = true;
                });
              }
            } catch (e) {
              console.error('❌ Error during file parsing/writing:', e.message);
            } finally {
              console.log(\`files_written=\${filesWritten}\`);
            }
          " >> $GITHUB_OUTPUT
                  
      - name: 'Commit and Push Changes'
        if: steps.gemini_code.outputs.files_written == 'true'
        env:
          BRANCH_NAME: ${{ steps.gemini_code.outputs.branch_name }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot (Gemini)"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "feat(gemini): Implement fix for #${ISSUE_NUMBER}"
            git push origin ${BRANCH_NAME}
          else
            echo "⚠️ No file changes detected. Skipping commit."
            exit 1
          fi
          
      - name: 'Create Pull Request'
        if: steps.gemini_code.outputs.files_written == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ steps.gemini_code.outputs.branch_name }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          gh pr create \
            --base master \
            --head ${BRANCH_NAME} \
            --title "🤖 Implemented: Fix/Feature for #${ISSUE_NUMBER}" \
            --body "Automated PR generated by the Gemini Action. Closes #${ISSUE_NUMBER}" \
            --repo ${{ github.repository }}
            
          PR_URL=$(gh pr list --head ${BRANCH_NAME} --json url -q '.[0].url' || true)
          MESSAGE="✅ Code generation complete! A Pull Request has been opened: ${PR_URL}"
          gh issue comment ${ISSUE_NUMBER} --body "${MESSAGE}" --repo ${{ github.repository }}
